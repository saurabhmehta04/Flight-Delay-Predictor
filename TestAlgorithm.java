package com.weka.trainandtest;
/**
This code takes reference from Jose Maria Gomez Hidalgo - http://www.esp.uem.es/jmgomez
This class uses the model file ArrDelayModel.model generated by TrainAlgorith.java 
for predicting the test instance output.
*/
 
import weka.core.*;
import weka.core.FastVector;
import weka.classifiers.meta.FilteredClassifier;
import java.io.*;

public class TestAlgorithm 
{
	 private int departureHour;
	 private int departureMinute;
	 private int arrivalHour;
	 private int arrivalMinute;
	 private int departureYear;
	 private int departureMonth;
	 private int departureDayofMonth;
	 private int departureDayofWeek;
	 private String carrierCode;
	 private String originAirportCode;
	 private String destinationAirportCode;	 
	    
	String tokens[];

	// flight carrier codes
	String[] arrCarrierCodes = {"AA","AS","B6","CO","DH","DL","EV","FL","HP","MQ","NW","OH","OO","XE","TZ","UA","US",
			"WN","HA","F9","YV","KH","9E"};
	
	// flight origin codes
	String[] arrOriginCodes = {"DCA","LGA","DFW","HPN","COS","ORD","SFO","EWR","FLL","MCI","STL","BRW","PDX","OAK",
			"SEA","ONT","SAN","PHX","TUS","BOS","AUS","IAH","TPA","PIT","GSO","AZO","CLE","PWM","IAD","ATL","MCO",
			"MIA","PHL","MSP","HOU","AEX","MEM","MKE","LAS","SNA","ACT","MAF","SDF","BTR","LIT","MDT","DTW","RDU","RAP",
			"DLH","CVG","CAK","ROA","GSP","IND","HLN","SBA","SJC","SMF","DEN","MFR","MRY","BUF","GRR","LFT","LCH","BHM",
			"SYR","MDW","BWI","DSM","CLT","BNA","BUR","DAL","JAN","LAX","MSY","OKC","OMA","RNO","BDL","DAY","SAT","JFK",
			"ANC","GEG","SAV","SLC","LYH","HNL","TUL","BMI","RIC","MBS","SBN","FNT","MHT","MLI","TOL","FAT","BIS","EFD",
			"ORF","ROC","PVD","ABQ","HRL","FAI","TYS","BZN","JAX","CMH","ELP","LGB","BGM","EVV","CAE","PHF","TYR","SHV",
			"LBB","BGR","EKO","EUG","ISP","SJU","BTV","AVL","SRQ","PBI","HSV","BIL","RDM","SUN","BPT","PIH","BOI","PNS",
			"VPS","LEX","MYR","MSN","CEC","COD","FSD","SBP","CRP","CRW","ILM","LIH","XNA","TRI","CLD","MFE","ALB","TLH",
			"GRK","GGG","FAR","LAN","CIC","IPL","RSW","CMI","AMA","CID","GTR","TXK","TVC","PSC","ABE","FAY","RST","ACY",
			"IDA","VIS","MSO","PSP","MCN","ITO","SJT","AVP","BFL","CHS","ADQ","MOB","MLB","ICT","GJT","DAB","KOA","OME",
			"AGS","LSE","FWA","OGG","GPT","CLL","MOT","MLU","SGU","GNV","GRB","GFK","ATW","ACV","ABI","KTN","JNU","LWB",
			"PIA","HVN","FSM","JAC","MTJ","BET","BTM","HDN","LAW","LNK","STT","OTZ","DRO","SGF","BRO","VLD","DBQ","IYK",
			"MGM","PFN","CHA","ABY","GTF","TWF","RDD","ACK","BQK","BLI","MOD","CWA","ISO","EYW","WRG","ERI","FLG","DHN",
			"ASE","SIT","CPR","ELM","YKM","LWS","LRD","OXR","SWF","SUX","YAK","RFD","YUM","BJI","CDV","SCE","EWN"};
	
	// flight destitnation codes
	String[] arrDestinationCodes = {"DFW","TPA","ORD","AUS","DCA","SEA","LAX","HDN","FAI","SFO","BUR","PDX","SNA","LAS","MCO",
			"IAH","PHL","SJU","EWR","ONT","IAD","LNK","DTW","ATL","SJC","BOS","STL","CLE","SLC","CVG","HTS","CRP","MCI","SAN",
			"PHX","OKC","TYS","AMA","CLT","RDU","MSP","MEM","IND","MDW","JFK","FAR","SYR","CAE","CHS","FLL","GSP","DRO","GRR",
			"MHT","ALB","TUL","PIE","LIH","DEN","OAK","BUF","MSY","HOU","SAT","BNA","BWI","DAL","MIA","ELP","LGA","TUS","MBS",
			"HSV","BTR","PHF","GNV","FNT","BOI","ROC","CMH","ATW","GJT","ABQ","OXR","SMF","MRY","EFD","JAX","PIT","HRL","ANC",
			"SBN","SBA","RSW","LEX","RIC","GSO","AVL","KOA","SPS","MLI","ABE","ICT","LBB","LGB","MFE","BHM","PVD","CRW","XNA",
			"CMI","MKE","SWF","RAP","GEG","AVP","OMA","PIH","CPR","SBP","SAV","BDL","MAF","RNO","OGG","PFN","ORF","SDF","SHV",
			"MYR","HPN","MDT","BZN","FAT","LCH","PBI","JAN","PWM","SRQ","AGS","HNL","MSN","BIS","FCA","ROA","ITO","LAW","FSM",
			"TWF","DSM","JAC","ISP","JNU","TLH","PSP","PNS","SGF","DBQ","PSC","BPT","COS","SUN","RDM","DAY","TRI","CSG","FSD",
			"ACV","EUG","GRK","BTV","MLB","GGG","GPT","ERI","CLD","VPS","CAK","LYH","BGR","LRD","CHA","TOL","BQK","CLL","GTF",
			"LIT","LAN","BIL","EGE","RST","MOD","FWA","BTM","SIT","CHO","TYR","HLN","ILM","EVV","IYK","DHN","EKO","BET","RDD",
			"MTJ","STT","CIC","IDA","LFT","MCN","MGM","HKY","PIA","LSE","BFL","SGU","GRB","SMX","MFR","MOB","STX","TUP","BMI",
			"CID","COD","OME","DAB","BRW","WRG","ACT","TVC","IPL","BRO","MLU","SCC","PSG","AZO","MSO","GTR","CWA","YUM","FAY",
			"ABI","SJT","CDV","MQT","BJI","HHH","GFK","BQN","ASE","SPI","FLG","KTN","RFD","ACK","BGM","YAK","ABY","TXK","ELM",
			"OTZ"};
	
	Instances instances;
	FilteredClassifier classifier;

	public String load(String input) 
	{
		String result = "Hello";
		String fileName = "/mnt/sdcard/ArrDelayModel.model";
		
		tokens = input.split(",");
		departureYear = Integer.parseInt(tokens[0]);
		departureMonth = Integer.parseInt(tokens[1]);
		departureDayofMonth = Integer.parseInt(tokens[2]);
		departureDayofWeek = Integer.parseInt(tokens[3]);
		carrierCode = tokens[4].toString();
		originAirportCode = tokens[5].toString();
		destinationAirportCode = tokens[6].toString();
		departureHour = Integer.parseInt(tokens[7]);
		departureMinute = Integer.parseInt(tokens[8]);
		arrivalHour = Integer.parseInt(tokens[9]);
		arrivalMinute = Integer.parseInt(tokens[10]);
		
		//=========================================================================================================
		
		try {
			ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));
            Object tmp = in.readObject();
			classifier = (FilteredClassifier) tmp;
            in.close();
 			System.out.println("===== Loaded model: " + fileName + " =====");
       } 
		catch (Exception e) {
			System.out.println("Error reading: " + fileName);
		}
		
		//=========================================================================================================
		
		FastVector fvNominalClassVal = new FastVector(2);
		fvNominalClassVal.addElement("0");
		fvNominalClassVal.addElement("1");
				
		FastVector fvNominalCarrierCodeVal = new FastVector(arrCarrierCodes.length);
		for(int i=0; i<arrCarrierCodes.length; i++)
		{		
			fvNominalCarrierCodeVal.addElement(arrCarrierCodes[i]);
		}
		
		FastVector fvNominalOriginCodeVal = new FastVector(arrOriginCodes.length);
		for(int i=0; i<arrOriginCodes.length; i++)
		{		
			fvNominalOriginCodeVal.addElement(arrOriginCodes[i]);
		}
		
		FastVector fvNominalDestinationCodeVal = new FastVector(arrDestinationCodes.length);
		for(int i=0; i<arrDestinationCodes.length; i++)
		{		
			fvNominalDestinationCodeVal.addElement(arrDestinationCodes[i]);
		}
		
		// Create attributes for test instance
		Attribute attribute1 = new Attribute("YEAR");
		Attribute attribute2 = new Attribute("MONTH");
		Attribute attribute3 = new Attribute("DAY_OF_MONTH");
		Attribute attribute4 = new Attribute("DAY_OF_WEEK");
		Attribute attribute5 = new Attribute("UNIQUE_CARRIER",fvNominalCarrierCodeVal);	
		Attribute attribute6 = new Attribute("ORIGIN",fvNominalOriginCodeVal);
		Attribute attribute7 = new Attribute("DEST",fvNominalDestinationCodeVal);
		Attribute attribute8 = new Attribute("CRS_DEP_TIME");
		Attribute attribute9 = new Attribute("CRS_ARR_TIME");
		Attribute attribute10 = new Attribute("ARR_DELAY", fvNominalClassVal);
		
		// Create list of instances with one element
		FastVector fvWekaAttributes = new FastVector(10);
		fvWekaAttributes.addElement(attribute1);
		fvWekaAttributes.addElement(attribute2);
		fvWekaAttributes.addElement(attribute3);
		fvWekaAttributes.addElement(attribute4);
		fvWekaAttributes.addElement(attribute5);
		fvWekaAttributes.addElement(attribute6);
		fvWekaAttributes.addElement(attribute7);
		fvWekaAttributes.addElement(attribute8);
		fvWekaAttributes.addElement(attribute9);
		fvWekaAttributes.addElement(attribute10);
		instances = new Instances("Test Relation", fvWekaAttributes, 1);           
		
		// Set class index
		instances.setClassIndex(instances.numAttributes()-1);
		// Create and add the instance
		Instance instance = new Instance(10);
		instance.setValue(attribute1, departureYear);
		instance.setValue(attribute2, departureMonth);
		instance.setValue(attribute3, departureDayofMonth);
		instance.setValue(attribute4, departureDayofWeek);
		instance.setValue(attribute5, carrierCode);
		instance.setValue(attribute6, originAirportCode);
		instance.setValue(attribute7, destinationAirportCode);
		instance.setValue(attribute8, Integer.parseInt(departureHour+""+departureMinute));
		instance.setValue(attribute9, Integer.parseInt(arrivalHour+""+arrivalMinute));
		instances.add(instance);

 		System.out.println("===== Instance created with reference dataset =====\n");
		System.out.println(instances);
		System.out.println("\n===================================================");
		
		//=========================================================================================================
		
		try 
		{
			double pred = classifier.classifyInstance(instances.instance(0));
			System.out.println("===== Classified instance =====");
			
			result = instances.classAttribute().value((int) pred);
			System.out.println(result);
		}
		catch (Exception e) {
			System.out.println("Error classifying the text");
		}
		//=========================================================================================================
		
		return result;	
	}

	
	public static void main (String[] args) {

		TestAlgorithm classifier;
		classifier = new TestAlgorithm();
		classifier.load("test-instance");
		//"2004,1,25,7,AA,SFO,DCA,18,12,20,41,?"
	}
}